{
	"info": {
		"_postman_id": "d6b86c62-65c3-408d-ba2f-9294b0063c76",
		"name": "Onboarding Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23070577"
	},
	"item": [
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"pm.environment.set(\"projectResponse\", jsonResponse);",
									"console.log(pm.environment.get(\"projectResponse\"));",
									"",
									"pm.test(\"Validate no projects are created before test\", ()=>{",
									"    pm.expect(Object.keys(jsonResponse).length).to.eq(1);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todoistUrlProject}}",
							"host": [
								"{{todoistUrlProject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();",
									"pm.environment.set(\"projectId\", jsonResponse.id);",
									"pm.environment.set(\"projectTitle\",jsonResponse.name);",
									"",
									"",
									"pm.test('QA Challenge created succesfully', ()=>{",
									"    let content = false;",
									"    pm.sendRequest({",
									"        header: {",
									"            \"Authorization\" : \"Bearer \"+ pm.environment.get(\"todoisttoken\")",
									"        },",
									"        url: pm.environment.get('todoistUrlProject'),",
									"        method: 'GET'",
									"    }, (error, reqResponse) => {",
									"        if(error){",
									"            console.log(error);",
									"        }else{",
									"        jsonResponse = reqResponse.json();",
									"        for(let resp = 0; resp < Object.keys(jsonResponse).length ; resp++){",
									"            if(jsonResponse[resp].name == pm.environment.get('projectTitle')){",
									"                content = true;",
									"                break;",
									"            };",
									"        };",
									"        };",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"QAChallenge\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todoistUrlProject}}",
							"host": [
								"{{todoistUrlProject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test('Created project name is correct',()=>{",
									"    pm.expect(jsonResponse.name).to.eq(pm.environment.get(\"projectTitle\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todoistUrlProject}}/{{projectId}}",
							"host": [
								"{{todoistUrlProject}}"
							],
							"path": [
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Validate updated project name is correct\", ()=>{",
									"    pm.expect(jsonResponse.name).to.eq(pm.environment.get(\"modifiedProjectTitle\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"{{modifiedProjectTitle}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todoistUrlProject}}/{{projectId}}",
							"host": [
								"{{todoistUrlProject}}"
							],
							"path": [
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate correctly deleted project\", ()=>{",
									"",
									"    pm.sendRequest({",
									"        header: {",
									"            \"Authorization\" : \"Bearer \"+ pm.environment.get(\"todoisttoken\")",
									"        },",
									"        url: pm.environment.get('todoistUrlProject'),",
									"        method: 'GET'",
									"    }, (error, reqResponse) => {",
									"        if(error){",
									"            console.log(error);",
									"        }else{",
									"        let valid = false;",
									"        const jsonResponse = reqResponse.json();",
									"        const responseSize = Object.keys(jsonResponse).length;",
									"        for(let resp = 0; resp < responseSize ; resp++){",
									"            if(jsonResponse[resp].name == pm.environment.get('modifiedProjectTitle')){",
									"                valid = true;",
									"                pm.expect(valid).to.true;",
									"                break;",
									"            };",
									"        };",
									"        };",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{todoistUrlProject}}/{{projectId}}",
							"host": [
								"{{todoistUrlProject}}"
							],
							"path": [
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Endpoint not reachable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Authorization token not provided',()=>{",
									"    pm.response.to.have.status(401);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todoistUrlProject}}",
							"host": [
								"{{todoistUrlProject}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get active tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todoistUrlTask}}",
							"host": [
								"{{todoistUrlTask}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"pm.environment.set(\"taskId\", jsonResponse.id);",
									"pm.environment.set(\"taskTitle\", jsonResponse.content);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Full process\",\n    \"dueString\": \"tomorrow at 20:00\",\n    \"dueLang\": \"en\",\n    \"priority\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todoistUrlTask}}",
							"host": [
								"{{todoistUrlTask}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Task found\", function () {",
									"    pm.expect(jsonResponse.id).to.eq(pm.environment.get(\"taskId\"));",
									"});",
									"",
									"pm.test(\"Body matches task content\", function () {",
									"    pm.expect(jsonResponse.content).to.eq(pm.environment.get(\"taskTitle\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todoistUrlTask}}/{{taskId}}",
							"host": [
								"{{todoistUrlTask}}"
							],
							"path": [
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{todoistUrlTask}}/{{taskId}}/close",
							"host": [
								"{{todoistUrlTask}}"
							],
							"path": [
								"{{taskId}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reopen a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{todoistUrlTask}}/{{taskId}}/reopen",
							"host": [
								"{{todoistUrlTask}}"
							],
							"path": [
								"{{taskId}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{todoistUrlTask}}/{{taskId}}",
							"host": [
								"{{todoistUrlTask}}"
							],
							"path": [
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Endpoint not reachable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Authorization token not provided',()=>{",
									"    pm.response.to.have.status(401);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todoistUrlTask}}",
							"host": [
								"{{todoistUrlTask}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{todoisttoken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{todoisttoken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}